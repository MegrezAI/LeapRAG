"""Initial migration

Revision ID: 102c41366ba2
Revises: 
Create Date: 2025-04-27 13:55:37.785352

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '102c41366ba2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account_integrates',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('account_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('provider', sa.String(length=16), nullable=False),
    sa.Column('open_id', sa.String(length=255), nullable=False),
    sa.Column('encrypted_token', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('account_integrates_pkey')),
    sa.UniqueConstraint('account_id', 'provider', name='unique_account_provider'),
    sa.UniqueConstraint('provider', 'open_id', name='unique_provider_open_id')
    )
    op.create_table('account_plugin_permissions',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('install_permission', sa.String(length=16), server_default=sa.text("'everyone'::character varying"), nullable=False),
    sa.Column('debug_permission', sa.String(length=16), server_default=sa.text("'noone'::character varying"), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('account_plugin_permissions_pkey')),
    sa.UniqueConstraint('tenant_id', name='unique_tenant_plugin')
    )
    op.create_table('accounts',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('password_salt', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=16), nullable=False),
    sa.Column('avatar', sa.String(), nullable=True),
    sa.Column('interface_language', sa.String(length=255), nullable=True),
    sa.Column('interface_theme', sa.String(length=255), nullable=True),
    sa.Column('timezone', sa.String(length=255), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_ip', sa.String(length=255), nullable=True),
    sa.Column('last_active_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('initialized_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('accounts_pkey')),
    sa.UniqueConstraint('email', name=op.f('accounts_email_key')),
    sa.UniqueConstraint('username', name=op.f('accounts_username_key'))
    )
    op.create_table('api_4_conversations',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('dialog_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('user_id', sa.dialects.postgresql.UUID(), nullable=False, comment='user_id'),
    sa.Column('messages', sa.JSON(), nullable=True),
    sa.Column('reference', sa.JSON(), nullable=True),
    sa.Column('tokens', sa.Integer(), nullable=False),
    sa.Column('source', sa.String(length=36), nullable=True, comment='none|agent|dialog'),
    sa.Column('dsl', sa.JSON(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=False),
    sa.Column('round', sa.Integer(), nullable=False),
    sa.Column('thumb_up', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('api_4_conversations_pkey'))
    )
    op.create_index(op.f('api_4_conversations_dialog_id_idx'), 'api_4_conversations', ['dialog_id'], unique=False)
    op.create_index(op.f('api_4_conversations_duration_idx'), 'api_4_conversations', ['duration'], unique=False)
    op.create_index(op.f('api_4_conversations_round_idx'), 'api_4_conversations', ['round'], unique=False)
    op.create_index(op.f('api_4_conversations_source_idx'), 'api_4_conversations', ['source'], unique=False)
    op.create_index(op.f('api_4_conversations_thumb_up_idx'), 'api_4_conversations', ['thumb_up'], unique=False)
    op.create_index(op.f('api_4_conversations_user_id_idx'), 'api_4_conversations', ['user_id'], unique=False)
    op.create_table('api_tokens',
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('apikey', sa.String(length=255), nullable=False),
    sa.Column('dialog_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('agent_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('source', sa.String(length=36), nullable=True, comment='none|agent|dialog'),
    sa.Column('beta', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('tenant_id', 'apikey', name=op.f('api_tokens_pkey'))
    )
    op.create_index(op.f('api_tokens_agent_id_idx'), 'api_tokens', ['agent_id'], unique=False)
    op.create_index(op.f('api_tokens_beta_idx'), 'api_tokens', ['beta'], unique=False)
    op.create_index(op.f('api_tokens_dialog_id_idx'), 'api_tokens', ['dialog_id'], unique=False)
    op.create_index(op.f('api_tokens_source_idx'), 'api_tokens', ['source'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('dialog_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True, comment='conversation name'),
    sa.Column('messages', sa.JSON(), nullable=True),
    sa.Column('reference', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('conversations_pkey'))
    )
    op.create_index(op.f('conversations_dialog_id_idx'), 'conversations', ['dialog_id'], unique=False)
    op.create_index(op.f('conversations_name_idx'), 'conversations', ['name'], unique=False)
    op.create_table('dialogs',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('agent_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True, comment='dialog application name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Dialog description'),
    sa.Column('icon', sa.Text(), nullable=True, comment='icon base64 string'),
    sa.Column('language', sa.String(length=32), nullable=True, comment='English|Chinese'),
    sa.Column('llm_id', sa.String(length=128), nullable=False, comment='default llm ID'),
    sa.Column('llm_setting', sa.JSON(), nullable=False),
    sa.Column('prompt_type', sa.String(length=16), nullable=False, comment='simple|advanced'),
    sa.Column('prompt_config', sa.JSON(), nullable=False),
    sa.Column('similarity_threshold', sa.Float(), nullable=False),
    sa.Column('vector_similarity_weight', sa.Float(), nullable=False),
    sa.Column('top_n', sa.Integer(), nullable=False),
    sa.Column('top_k', sa.Integer(), nullable=False),
    sa.Column('do_refer', sa.String(length=1), nullable=False, comment='it needs to insert reference index into answer or not'),
    sa.Column('rerank_id', sa.String(length=128), nullable=False, comment='default rerank model ID'),
    sa.Column('kb_ids', sa.JSON(), nullable=False),
    sa.Column('status', sa.String(length=1), nullable=True, comment='is it validate(0: wasted, 1: validate)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('dialogs_pkey'))
    )
    op.create_index(op.f('dialogs_agent_id_idx'), 'dialogs', ['agent_id'], unique=False)
    op.create_index(op.f('dialogs_language_idx'), 'dialogs', ['language'], unique=False)
    op.create_index(op.f('dialogs_name_idx'), 'dialogs', ['name'], unique=False)
    op.create_index(op.f('dialogs_prompt_type_idx'), 'dialogs', ['prompt_type'], unique=False)
    op.create_index(op.f('dialogs_status_idx'), 'dialogs', ['status'], unique=False)
    op.create_index(op.f('dialogs_tenant_id_idx'), 'dialogs', ['tenant_id'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('thumbnail', sa.String(), nullable=True),
    sa.Column('kb_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('parser_id', sa.String(length=32), nullable=False),
    sa.Column('parser_config', sa.JSON(), nullable=False),
    sa.Column('source_type', sa.String(length=128), nullable=False),
    sa.Column('type', sa.String(length=32), nullable=False),
    sa.Column('created_by', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('token_num', sa.Integer(), nullable=False),
    sa.Column('chunk_num', sa.Integer(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('progress_msg', sa.String(), nullable=True),
    sa.Column('process_begin_at', sa.DateTime(), nullable=True),
    sa.Column('process_duration', sa.Float(), nullable=False),
    sa.Column('meta_fields', sa.JSON(), nullable=True),
    sa.Column('run', sa.String(length=1), nullable=True),
    sa.Column('status', sa.String(length=1), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('documents_pkey'))
    )
    op.create_index(op.f('documents_chunk_num_idx'), 'documents', ['chunk_num'], unique=False)
    op.create_index(op.f('documents_created_by_idx'), 'documents', ['created_by'], unique=False)
    op.create_index(op.f('documents_kb_id_idx'), 'documents', ['kb_id'], unique=False)
    op.create_index(op.f('documents_location_idx'), 'documents', ['location'], unique=False)
    op.create_index(op.f('documents_name_idx'), 'documents', ['name'], unique=False)
    op.create_index(op.f('documents_parser_id_idx'), 'documents', ['parser_id'], unique=False)
    op.create_index(op.f('documents_process_begin_at_idx'), 'documents', ['process_begin_at'], unique=False)
    op.create_index(op.f('documents_progress_idx'), 'documents', ['progress'], unique=False)
    op.create_index(op.f('documents_run_idx'), 'documents', ['run'], unique=False)
    op.create_index(op.f('documents_size_idx'), 'documents', ['size'], unique=False)
    op.create_index(op.f('documents_source_type_idx'), 'documents', ['source_type'], unique=False)
    op.create_index(op.f('documents_status_idx'), 'documents', ['status'], unique=False)
    op.create_index(op.f('documents_token_num_idx'), 'documents', ['token_num'], unique=False)
    op.create_index(op.f('documents_type_idx'), 'documents', ['type'], unique=False)
    op.create_table('file2documents',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('file_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('document_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('file2documents_pkey'))
    )
    op.create_index(op.f('file2documents_document_id_idx'), 'file2documents', ['document_id'], unique=False)
    op.create_index(op.f('file2documents_file_id_idx'), 'file2documents', ['file_id'], unique=False)
    op.create_table('files',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('parent_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('created_by', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=32), nullable=False),
    sa.Column('source_type', sa.String(length=128), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('files_pkey'))
    )
    op.create_index(op.f('files_created_by_idx'), 'files', ['created_by'], unique=False)
    op.create_index(op.f('files_location_idx'), 'files', ['location'], unique=False)
    op.create_index(op.f('files_name_idx'), 'files', ['name'], unique=False)
    op.create_index(op.f('files_parent_id_idx'), 'files', ['parent_id'], unique=False)
    op.create_index(op.f('files_size_idx'), 'files', ['size'], unique=False)
    op.create_index(op.f('files_source_type_idx'), 'files', ['source_type'], unique=False)
    op.create_index(op.f('files_tenant_id_idx'), 'files', ['tenant_id'], unique=False)
    op.create_index(op.f('files_type_idx'), 'files', ['type'], unique=False)
    op.create_table('invitation_codes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch', sa.String(length=255), nullable=False),
    sa.Column('code', sa.String(length=32), nullable=False),
    sa.Column('status', sa.String(length=16), server_default=sa.text("'unused'::character varying"), nullable=False),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('used_by_tenant_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('used_by_account_id', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('deprecated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('invitation_codes_pkey'))
    )
    op.create_index('invitation_codes_batch_idx', 'invitation_codes', ['batch'], unique=False)
    op.create_index('invitation_codes_code_idx', 'invitation_codes', ['code', 'status'], unique=False)
    op.create_table('knowledgebases',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('avatar', sa.String(), nullable=True),
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('language', sa.String(length=32), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('embd_id', sa.String(length=128), nullable=False),
    sa.Column('permission', sa.String(length=16), nullable=False),
    sa.Column('created_by', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('doc_num', sa.Integer(), nullable=False),
    sa.Column('token_num', sa.Integer(), nullable=False),
    sa.Column('chunk_num', sa.Integer(), nullable=False),
    sa.Column('similarity_threshold', sa.Float(), nullable=False),
    sa.Column('vector_similarity_weight', sa.Float(), nullable=False),
    sa.Column('parser_id', sa.String(length=32), nullable=False),
    sa.Column('parser_config', sa.JSON(), nullable=False),
    sa.Column('pagerank', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=1), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('knowledgebases_pkey'))
    )
    op.create_index(op.f('knowledgebases_chunk_num_idx'), 'knowledgebases', ['chunk_num'], unique=False)
    op.create_index(op.f('knowledgebases_created_by_idx'), 'knowledgebases', ['created_by'], unique=False)
    op.create_index(op.f('knowledgebases_doc_num_idx'), 'knowledgebases', ['doc_num'], unique=False)
    op.create_index(op.f('knowledgebases_embd_id_idx'), 'knowledgebases', ['embd_id'], unique=False)
    op.create_index(op.f('knowledgebases_language_idx'), 'knowledgebases', ['language'], unique=False)
    op.create_index(op.f('knowledgebases_name_idx'), 'knowledgebases', ['name'], unique=False)
    op.create_index(op.f('knowledgebases_parser_id_idx'), 'knowledgebases', ['parser_id'], unique=False)
    op.create_index(op.f('knowledgebases_permission_idx'), 'knowledgebases', ['permission'], unique=False)
    op.create_index(op.f('knowledgebases_similarity_threshold_idx'), 'knowledgebases', ['similarity_threshold'], unique=False)
    op.create_index(op.f('knowledgebases_status_idx'), 'knowledgebases', ['status'], unique=False)
    op.create_index(op.f('knowledgebases_tenant_id_idx'), 'knowledgebases', ['tenant_id'], unique=False)
    op.create_index(op.f('knowledgebases_token_num_idx'), 'knowledgebases', ['token_num'], unique=False)
    op.create_index(op.f('knowledgebases_vector_similarity_weight_idx'), 'knowledgebases', ['vector_similarity_weight'], unique=False)
    op.create_table('leap_setups',
    sa.Column('version', sa.String(length=255), nullable=False),
    sa.Column('setup_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('version', name=op.f('leap_setups_pkey'))
    )
    op.create_table('llm_factories',
    sa.Column('name', sa.String(length=128), nullable=False, comment='LLM factory name'),
    sa.Column('logo', sa.String(), nullable=True, comment='llm logo base64'),
    sa.Column('tags', sa.String(length=255), nullable=False, comment='LLM, Text Embedding, Image2Text, ASR'),
    sa.Column('status', sa.String(length=1), nullable=True, comment='is it validate(0: wasted, 1: validate)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('llm_factories_pkey'))
    )
    op.create_index(op.f('llm_factories_status_idx'), 'llm_factories', ['status'], unique=False)
    op.create_index(op.f('llm_factories_tags_idx'), 'llm_factories', ['tags'], unique=False)
    op.create_table('llms',
    sa.Column('llm_name', sa.String(length=128), nullable=False, comment='LLM name'),
    sa.Column('model_type', sa.String(length=128), nullable=False, comment='LLM, Text Embedding, Image2Text, ASR'),
    sa.Column('fid', sa.String(length=128), nullable=False, comment='LLM factory id'),
    sa.Column('max_tokens', sa.Integer(), nullable=False),
    sa.Column('tags', sa.String(length=255), nullable=False, comment='LLM, Text Embedding, Image2Text, Chat, 32k...'),
    sa.Column('status', sa.String(length=1), nullable=True, comment='is it validate(0: wasted, 1: validate)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('llm_name', 'fid', name=op.f('llms_pkey'))
    )
    op.create_index(op.f('llms_fid_idx'), 'llms', ['fid'], unique=False)
    op.create_index(op.f('llms_llm_name_idx'), 'llms', ['llm_name'], unique=False)
    op.create_index(op.f('llms_model_type_idx'), 'llms', ['model_type'], unique=False)
    op.create_index(op.f('llms_status_idx'), 'llms', ['status'], unique=False)
    op.create_index(op.f('llms_tags_idx'), 'llms', ['tags'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('doc_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('from_page', sa.Integer(), nullable=False),
    sa.Column('to_page', sa.Integer(), nullable=False),
    sa.Column('begin_at', sa.DateTime(), nullable=True),
    sa.Column('process_duration', sa.Float(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('progress_msg', sa.Text(), nullable=True, comment='process message'),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('task_type', sa.String(length=32), nullable=False),
    sa.Column('digest', sa.Text(), nullable=True, comment='task digest'),
    sa.Column('chunk_ids', sa.Text(), nullable=True, comment='chunk ids'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    op.create_index('idx_doc_id_task_type_unique', 'tasks', ['doc_id', 'task_type', 'from_page'], unique=True)
    op.create_index(op.f('tasks_begin_at_idx'), 'tasks', ['begin_at'], unique=False)
    op.create_index(op.f('tasks_progress_idx'), 'tasks', ['progress'], unique=False)
    op.create_table('tenant_llms',
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('llm_factory', sa.String(length=128), nullable=False, comment='LLM factory name'),
    sa.Column('model_type', sa.String(length=128), nullable=True, comment='LLM, Text Embedding, Image2Text, ASR'),
    sa.Column('llm_name', sa.String(length=128), nullable=False, comment='LLM name'),
    sa.Column('api_key', sa.String(length=1024), nullable=True, comment='API KEY'),
    sa.Column('api_base', sa.String(length=255), nullable=True, comment='API Base'),
    sa.Column('max_tokens', sa.Integer(), nullable=False),
    sa.Column('used_tokens', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('tenant_id', 'llm_factory', 'llm_name', name=op.f('tenant_llms_pkey'))
    )
    op.create_index(op.f('tenant_llms_api_key_idx'), 'tenant_llms', ['api_key'], unique=False)
    op.create_index(op.f('tenant_llms_llm_factory_idx'), 'tenant_llms', ['llm_factory'], unique=False)
    op.create_index(op.f('tenant_llms_llm_name_idx'), 'tenant_llms', ['llm_name'], unique=False)
    op.create_index(op.f('tenant_llms_max_tokens_idx'), 'tenant_llms', ['max_tokens'], unique=False)
    op.create_index(op.f('tenant_llms_model_type_idx'), 'tenant_llms', ['model_type'], unique=False)
    op.create_index(op.f('tenant_llms_tenant_id_idx'), 'tenant_llms', ['tenant_id'], unique=False)
    op.create_index(op.f('tenant_llms_used_tokens_idx'), 'tenant_llms', ['used_tokens'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('encrypt_public_key', sa.String(), nullable=True),
    sa.Column('encrypt_private_key', sa.String(), nullable=True),
    sa.Column('plan', sa.String(length=255), server_default=sa.text("'basic'::character varying"), nullable=False),
    sa.Column('status', sa.String(length=255), server_default=sa.text("'normal'::character varying"), nullable=False),
    sa.Column('custom_config', sa.String(), nullable=True),
    sa.Column('llm_id', sa.String(length=128), nullable=False, comment='default llm ID'),
    sa.Column('embd_id', sa.String(length=128), nullable=False, comment='default embedding model ID'),
    sa.Column('asr_id', sa.String(length=128), nullable=False, comment='default ASR model ID'),
    sa.Column('img2txt_id', sa.String(length=128), nullable=False, comment='default image to text model ID'),
    sa.Column('rerank_id', sa.String(length=128), nullable=False, comment='default rerank model ID'),
    sa.Column('tts_id', sa.String(length=256), nullable=True, comment='default tts model ID'),
    sa.Column('parser_ids', sa.String(length=256), nullable=False, comment='document processors'),
    sa.Column('credit', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('tenants_pkey'))
    )
    op.create_index(op.f('tenants_asr_id_idx'), 'tenants', ['asr_id'], unique=False)
    op.create_index(op.f('tenants_credit_idx'), 'tenants', ['credit'], unique=False)
    op.create_index(op.f('tenants_embd_id_idx'), 'tenants', ['embd_id'], unique=False)
    op.create_index(op.f('tenants_img2txt_id_idx'), 'tenants', ['img2txt_id'], unique=False)
    op.create_index(op.f('tenants_llm_id_idx'), 'tenants', ['llm_id'], unique=False)
    op.create_index(op.f('tenants_parser_ids_idx'), 'tenants', ['parser_ids'], unique=False)
    op.create_index(op.f('tenants_rerank_id_idx'), 'tenants', ['rerank_id'], unique=False)
    op.create_index(op.f('tenants_tts_id_idx'), 'tenants', ['tts_id'], unique=False)
    op.create_table('agents',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), server_default=sa.text("''::character varying"), nullable=False),
    sa.Column('version', sa.String(length=255), nullable=False),
    sa.Column('icon', sa.Text(), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('documentation_url', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('agent_config', sa.JSON(), nullable=False),
    sa.Column('authentication', sa.JSON(), nullable=False),
    sa.Column('provider', sa.JSON(), nullable=False),
    sa.Column('capabilities', sa.JSON(), nullable=False),
    sa.Column('skills', sa.JSON(), nullable=False),
    sa.Column('default_input_modes', sa.JSON(), nullable=True),
    sa.Column('default_output_modes', sa.JSON(), nullable=True),
    sa.Column('created_by', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_by', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('agents_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('agents_pkey'))
    )
    op.create_table('tenant_account_joins',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('tenant_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('account_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('current', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('role', sa.String(length=16), server_default='normal', nullable=False),
    sa.Column('invited_by', sa.dialects.postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('tenant_account_joins_account_id_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('tenant_account_joins_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tenant_account_joins_pkey')),
    sa.UniqueConstraint('tenant_id', 'account_id', name='unique_tenant_account_join')
    )
    op.create_index('tenant_account_join_account_id_idx', 'tenant_account_joins', ['account_id'], unique=False)
    op.create_index('tenant_account_join_tenant_id_idx', 'tenant_account_joins', ['tenant_id'], unique=False)
    op.create_table('agent_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('agent_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('type', sa.String(length=36), nullable=True),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('headers', sa.JSON(), nullable=True),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('response_code', sa.Integer(), nullable=True),
    sa.Column('response', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name=op.f('agent_logs_agent_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('agent_logs_pkey'))
    )
    op.create_index(op.f('agent_logs_agent_id_idx'), 'agent_logs', ['agent_id'], unique=False)
    op.create_index(op.f('agent_logs_type_idx'), 'agent_logs', ['type'], unique=False)
    op.create_table('agent_tasks',
    sa.Column('id', sa.dialects.postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('agent_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('session_id', sa.dialects.postgresql.UUID(), nullable=False),
    sa.Column('state', sa.String(length=16), nullable=True),
    sa.Column('message', sa.JSON(), nullable=True),
    sa.Column('push_notification', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('artifacts', sa.JSON(), nullable=False),
    sa.Column('history', sa.JSON(), nullable=False),
    sa.Column('task_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name=op.f('agent_tasks_agent_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('agent_tasks_pkey'))
    )
    op.create_index(op.f('agent_tasks_agent_id_idx'), 'agent_tasks', ['agent_id'], unique=False)
    op.create_index(op.f('agent_tasks_session_id_idx'), 'agent_tasks', ['session_id'], unique=False)
    op.create_index(op.f('agent_tasks_state_idx'), 'agent_tasks', ['state'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('agent_tasks_state_idx'), table_name='agent_tasks')
    op.drop_index(op.f('agent_tasks_session_id_idx'), table_name='agent_tasks')
    op.drop_index(op.f('agent_tasks_agent_id_idx'), table_name='agent_tasks')
    op.drop_table('agent_tasks')
    op.drop_index(op.f('agent_logs_type_idx'), table_name='agent_logs')
    op.drop_index(op.f('agent_logs_agent_id_idx'), table_name='agent_logs')
    op.drop_table('agent_logs')
    op.drop_index('tenant_account_join_tenant_id_idx', table_name='tenant_account_joins')
    op.drop_index('tenant_account_join_account_id_idx', table_name='tenant_account_joins')
    op.drop_table('tenant_account_joins')
    op.drop_table('agents')
    op.drop_index(op.f('tenants_tts_id_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_rerank_id_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_parser_ids_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_llm_id_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_img2txt_id_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_embd_id_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_credit_idx'), table_name='tenants')
    op.drop_index(op.f('tenants_asr_id_idx'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_index(op.f('tenant_llms_used_tokens_idx'), table_name='tenant_llms')
    op.drop_index(op.f('tenant_llms_tenant_id_idx'), table_name='tenant_llms')
    op.drop_index(op.f('tenant_llms_model_type_idx'), table_name='tenant_llms')
    op.drop_index(op.f('tenant_llms_max_tokens_idx'), table_name='tenant_llms')
    op.drop_index(op.f('tenant_llms_llm_name_idx'), table_name='tenant_llms')
    op.drop_index(op.f('tenant_llms_llm_factory_idx'), table_name='tenant_llms')
    op.drop_index(op.f('tenant_llms_api_key_idx'), table_name='tenant_llms')
    op.drop_table('tenant_llms')
    op.drop_index(op.f('tasks_progress_idx'), table_name='tasks')
    op.drop_index(op.f('tasks_begin_at_idx'), table_name='tasks')
    op.drop_index('idx_doc_id_task_type_unique', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('llms_tags_idx'), table_name='llms')
    op.drop_index(op.f('llms_status_idx'), table_name='llms')
    op.drop_index(op.f('llms_model_type_idx'), table_name='llms')
    op.drop_index(op.f('llms_llm_name_idx'), table_name='llms')
    op.drop_index(op.f('llms_fid_idx'), table_name='llms')
    op.drop_table('llms')
    op.drop_index(op.f('llm_factories_tags_idx'), table_name='llm_factories')
    op.drop_index(op.f('llm_factories_status_idx'), table_name='llm_factories')
    op.drop_table('llm_factories')
    op.drop_table('leap_setups')
    op.drop_index(op.f('knowledgebases_vector_similarity_weight_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_token_num_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_tenant_id_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_status_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_similarity_threshold_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_permission_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_parser_id_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_name_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_language_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_embd_id_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_doc_num_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_created_by_idx'), table_name='knowledgebases')
    op.drop_index(op.f('knowledgebases_chunk_num_idx'), table_name='knowledgebases')
    op.drop_table('knowledgebases')
    op.drop_index('invitation_codes_code_idx', table_name='invitation_codes')
    op.drop_index('invitation_codes_batch_idx', table_name='invitation_codes')
    op.drop_table('invitation_codes')
    op.drop_index(op.f('files_type_idx'), table_name='files')
    op.drop_index(op.f('files_tenant_id_idx'), table_name='files')
    op.drop_index(op.f('files_source_type_idx'), table_name='files')
    op.drop_index(op.f('files_size_idx'), table_name='files')
    op.drop_index(op.f('files_parent_id_idx'), table_name='files')
    op.drop_index(op.f('files_name_idx'), table_name='files')
    op.drop_index(op.f('files_location_idx'), table_name='files')
    op.drop_index(op.f('files_created_by_idx'), table_name='files')
    op.drop_table('files')
    op.drop_index(op.f('file2documents_file_id_idx'), table_name='file2documents')
    op.drop_index(op.f('file2documents_document_id_idx'), table_name='file2documents')
    op.drop_table('file2documents')
    op.drop_index(op.f('documents_type_idx'), table_name='documents')
    op.drop_index(op.f('documents_token_num_idx'), table_name='documents')
    op.drop_index(op.f('documents_status_idx'), table_name='documents')
    op.drop_index(op.f('documents_source_type_idx'), table_name='documents')
    op.drop_index(op.f('documents_size_idx'), table_name='documents')
    op.drop_index(op.f('documents_run_idx'), table_name='documents')
    op.drop_index(op.f('documents_progress_idx'), table_name='documents')
    op.drop_index(op.f('documents_process_begin_at_idx'), table_name='documents')
    op.drop_index(op.f('documents_parser_id_idx'), table_name='documents')
    op.drop_index(op.f('documents_name_idx'), table_name='documents')
    op.drop_index(op.f('documents_location_idx'), table_name='documents')
    op.drop_index(op.f('documents_kb_id_idx'), table_name='documents')
    op.drop_index(op.f('documents_created_by_idx'), table_name='documents')
    op.drop_index(op.f('documents_chunk_num_idx'), table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('dialogs_tenant_id_idx'), table_name='dialogs')
    op.drop_index(op.f('dialogs_status_idx'), table_name='dialogs')
    op.drop_index(op.f('dialogs_prompt_type_idx'), table_name='dialogs')
    op.drop_index(op.f('dialogs_name_idx'), table_name='dialogs')
    op.drop_index(op.f('dialogs_language_idx'), table_name='dialogs')
    op.drop_index(op.f('dialogs_agent_id_idx'), table_name='dialogs')
    op.drop_table('dialogs')
    op.drop_index(op.f('conversations_name_idx'), table_name='conversations')
    op.drop_index(op.f('conversations_dialog_id_idx'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('api_tokens_source_idx'), table_name='api_tokens')
    op.drop_index(op.f('api_tokens_dialog_id_idx'), table_name='api_tokens')
    op.drop_index(op.f('api_tokens_beta_idx'), table_name='api_tokens')
    op.drop_index(op.f('api_tokens_agent_id_idx'), table_name='api_tokens')
    op.drop_table('api_tokens')
    op.drop_index(op.f('api_4_conversations_user_id_idx'), table_name='api_4_conversations')
    op.drop_index(op.f('api_4_conversations_thumb_up_idx'), table_name='api_4_conversations')
    op.drop_index(op.f('api_4_conversations_source_idx'), table_name='api_4_conversations')
    op.drop_index(op.f('api_4_conversations_round_idx'), table_name='api_4_conversations')
    op.drop_index(op.f('api_4_conversations_duration_idx'), table_name='api_4_conversations')
    op.drop_index(op.f('api_4_conversations_dialog_id_idx'), table_name='api_4_conversations')
    op.drop_table('api_4_conversations')
    op.drop_table('accounts')
    op.drop_table('account_plugin_permissions')
    op.drop_table('account_integrates')
    # ### end Alembic commands ###
